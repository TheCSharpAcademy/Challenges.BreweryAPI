// <auto-generated />
using System;
using Brewery.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Brewery.Infrastructure.EF.Migrations
{
    [DbContext(typeof(BreweryDbContext))]
    [Migration("20241119092325_AddUser")]
    partial class AddUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("brewery")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Brewery.Domain.Entities.Beer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrewerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrewerId");

                    b.ToTable("Beers", "brewery");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.BeerOrder", b =>
                {
                    b.Property<Guid>("BeerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BeerQuoteId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("BeerId");

                    b.HasIndex("BeerQuoteId");

                    b.ToTable("BeerOrder", "brewery");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.BeerQuote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DiscountInPercent")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("BeerQuotes", "brewery");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.BeerSale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("WholesalerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WholesalerId");

                    b.ToTable("BeerSales", "brewery");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.BeerStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrewerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BrewerId");

                    b.ToTable("BeerStocks", "brewery");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.Brewer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BreweryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BreweryId");

                    b.ToTable("Brewers", "brewery");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.Brewery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Breweries", "brewery");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Claims")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", "brewery");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.Wholesaler", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Wholesalers", "brewery");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.Beer", b =>
                {
                    b.HasOne("Brewery.Domain.Entities.Brewer", null)
                        .WithMany("Beers")
                        .HasForeignKey("BrewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Brewery.Domain.Entities.BeerOrder", b =>
                {
                    b.HasOne("Brewery.Domain.Entities.BeerQuote", null)
                        .WithMany("BeerOrders")
                        .HasForeignKey("BeerQuoteId");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.BeerSale", b =>
                {
                    b.HasOne("Brewery.Domain.Entities.Wholesaler", null)
                        .WithMany("BeerSales")
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Brewery.Domain.Entities.BeerStock", b =>
                {
                    b.HasOne("Brewery.Domain.Entities.Brewer", null)
                        .WithMany("BeerStocks")
                        .HasForeignKey("BrewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Brewery.Domain.Entities.Brewer", b =>
                {
                    b.HasOne("Brewery.Domain.Entities.Brewery", null)
                        .WithMany("Brewers")
                        .HasForeignKey("BreweryId");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.BeerQuote", b =>
                {
                    b.Navigation("BeerOrders");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.Brewer", b =>
                {
                    b.Navigation("BeerStocks");

                    b.Navigation("Beers");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.Brewery", b =>
                {
                    b.Navigation("Brewers");
                });

            modelBuilder.Entity("Brewery.Domain.Entities.Wholesaler", b =>
                {
                    b.Navigation("BeerSales");
                });
#pragma warning restore 612, 618
        }
    }
}
